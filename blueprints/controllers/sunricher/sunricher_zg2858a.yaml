blueprint:
  name: Sunricher ZG2858A - Télécommande RGB/CCT/DIM 3 canaux
  description: |
    # Sunricher ZG2858A - Télécommande RGB/CCT/DIM 3 canaux
    
    La télécommande **Sunricher ZG2858A** permet, grâce à ses nombreuses fonctions, de contrôler différentes lumières grâce à ses 3 canaux et ses contrôles de luminosité et de température de couleur.
    En plus, des boutons dédiés à l'exécution de scénarios ou de scènes permettent de rapidement définir un éclairage à sa convenance, mais aussi de contrôler n'importe quel appareil depuis cette automatisation.
    
    L'automatisation permet :
    * de **contrôler 3 lumières différentes** (1 par canal)
        * allumage/extinction
        * contrôle de la luminosité, en continu ou non
        * contrôle de la température de couleur
    * d'**exécuter 5 scénarios ou scènes** (5 par canal)
        * scénarios totalement indépendant de la lumière contrôlée dans chaque zone
        * n'importe quel appareil ou service peut être contrôlé depuis les scénarios
    
    L'automatisation permet également de **régler finement les paramètres des fonctions de base** :
    * interprétation des commandes `on` et `off`
    * type de réglage de la luminosité
        * valeur numérique
        * pourcentage
    * intervalle de réglage de la luminosité pour chaque type de réglage, en continu ou non
    * intervalle de temps entre chaque réglage de la luminosité, en continu
    
    **Visuel de la télécommande :**
    
    ![Photo de la télécommande Sunricher ZG2858A](https://raw.githubusercontent.com/schiz0phr3ne/ha-blueprints/main/images/sunricher/sunricher_zg2858a/sunricher_zg2858a.png)
  domain: automation
  
  input:
    integration:
      name: Intégration
      description: |
        Intégration Zigbee utilisée par ce contrôleur.
      selector:
        select:
          options:
            - label: Zigbee2MQTT
              value: zigbee2mqtt
          mode: dropdown
    controller_entity:
      name: Contrôleur
      description: |
        Capteur d'action du contrôleur à utiliser pour l'automatisation.
      selector:
        entity:
          domain: sensor
    light_zone_1:
      name: Zone 1 - Lumière
      description: |
        Lumière controlée en zone 1.
      selector:
        device:
          entity:
            domain: light
    scenario_1_zone_1:
      name: Zone 1 - Scénario 1
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_2_zone_1:
      name: Zone 1 - Scénario 2
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_3_zone_1:
      name: Zone 1 - Scénario 3
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_4_zone_1:
      name: Zone 1 - Scénario 4
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_5_zone_1:
      name: Zone 1 - Scénario 5
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    light_zone_2:
      name: Zone 2 - Lumière
      description: |
        Lumière controlée en zone 2.
      selector:
        device:
          entity:
            domain: light
    scenario_1_zone_2:
      name: Zone 2 - Scénario 1
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_2_zone_2:
      name: Zone 2 - Scénario 2
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_3_zone_2:
      name: Zone 2 - Scénario 3
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_4_zone_2:
      name: Zone 2 - Scénario 4
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_5_zone_2:
      name: Zone 2 - Scénario 5
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    light_zone_3:
      name: Zone 3 - Lumière
      description: |
        Lumière controlée en zone 3.
      selector:
        device:
          entity:
            domain: light
    scenario_1_zone_3:
      name: Zone 3 - Scénario 1
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_2_zone_3:
      name: Zone 3 - Scénario 2
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_3_zone_3:
      name: Zone 3 - Scénario 3
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_4_zone_3:
      name: Zone 3 - Scénario 4
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    scenario_5_zone_3:
      name: Zone 3 - Scénario 5
      description: |
        Le scénario n'est pas lié à la lumière controlée dans la zone correspondante.
        Il peut de ce fait contenir toute action que l'utilisateur veut exécuter.
      default: []
      selector:
        action:
    on_off_as_toggle:
      name: Interpréter les commandes d'allumage et d'extinction en tant que bascule
      description: |
        La télécommande envoie une commande `on` ou une commande `off`, quelque soit l'état de l'appareil contrôlé, lors d'appuis sur le bouton d'alimentation.
        Une interprétation stricte de ces commandes peut donc causer des effets indésirables.
        
        **Exemple :**
        Une commande `on` en zone 1 sera suivie d'une commande `off` en zone 2 ou 3.
        La lumière contrôlée en zone 2 ou 3 ne serait alors pas allumée, avant d'avoir rappuyé sur le bouton d'alimentation.
        
        Pour éviter ces effets indésirables, les commandes `on` et `off` peuvent être consédirées en `toggle` (en bascule).
        
        **Valeur par défaut :** activé
      default: True
      selector:
        boolean:
    brightness_setting_type:
      name: Luminosité - type de réglage
      description: |
        La luminosité peut être réglée en valeur numérique (de 0 à 255), ou en pourcentage (de 0 à 100%).
        Le réglage en valeur numérique permet plus de granularité, tandis que le réglage en pourcentage est plus aisé à comprendre.
        
        **Valeur par défaut :** valeur numérique
      default: value
      selector:
        select:
          options:
            - label: Valeur numérique
              value: value
            - label: Pourcentage
              value: percent
          mode: dropdown
    brightness_step:
      name: Luminosité - intervalle de réglage unitaire (valeur)
      description: |
        Nombre à ajouter ou soustraire d'une luminosité, lors d'appuis simples sur les boutons de réglage de la luminosité.
        
        **Minimum :** 1
        **Maximum :** 255
        
        **Valeur par défaut :** 15
      default: 15
      selector:
        number:
          min: 1
          max: 255
          mode: box
    brightness_step_pct:
      name: Luminosité - intervalle de réglage unitaire (pourcentage)
      description: |
        Nombre de pourcents à ajouter ou soustraire d'une luminosité, lors d'appuis simples sur les boutons de réglage de la luminosité.
        
        **Minimum :** 1%
        **Maximum :** 100%
        
        **Valeur par défaut :** 5%
      default: 5
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: box
    brightness_step_loop:
      name: Luminosité - intervalle de réglage continu (valeur)
      description: |
        Nombre à ajouter ou soustraire d'une luminosité, à chaque exécution de la boucle de réglage de la luminosité, lors d'appuis longs sur les boutons de réglage de la luminosité.
        
        **Minimum :** 1
        **Maximum :** 255
        
        **Valeur par défaut :** 2
      default: 2
      selector:
        number:
          min: 1
          max: 255
          mode: box
    brightness_step_pct_loop:
      name: Luminosité - intervalle de réglage continu (pourcentage)
      description: |
        Nombre de pourcents à ajouter ou soustraire d'une luminosité, à chaque exécution de la boucle de réglage de la luminosité, lors d'appuis longs sur les boutons de réglage de la luminosité.
        
        **Minimum :** 1%
        **Maximum :** 100%
        
        **Valeur par défaut :** 1%
      default: 1
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: box
    brightness_move_max_loop_repeats:
      name: Luminosité - nombre maximal d'exécutions de la boucle de réglage continu
      description: |
        Permet de déterminer le nombre maximal d'exécution de la boucle de réglage continu de la luminosité, pour éviter d'envoyer des commandes inutiles quand la lumière est à sa luminosité minimale ou maximale.
        
        **Minimum :** 1
        **Maximum :** 255
        
        **Valeur par défaut :** 125
      default: 125
      selector:
        number:
          min: 1
          max: 255
          mode: box
    brightness_move_delay_loop_repeats:
      name: Luminosité - temps entre chaque exécution de la boucle de réglage continu
      description: |
        Permet de déterminer l'intervalle de temps entre chaque exécution de la boucle de réglage continu de la luminosité, pour fluidifier le passage d'une luminosité à une autre.
        
        **Attention** : un intervalle de temps trop court peut saturer un réseau (ZigBee, WiFi, etc.), et rendre inopérant le réglage de la luminosité mais aussi tout autre élément utilisant le même réseau.
        
        **Minimum :** 0,01 seconde
        **Maximum :** 1 seconde
        
        **Valeur par défaut :** 0,05 seconde
      default: 0.05
      selector:
        number:
          min: 0.01
          max: 1
          step: 0.01
          unit_of_measurement: 'seconde'
          mode: box
          
variables:
  integration: !input integration
  controller_entity: !input controller_entity
  light_zone_1: !input light_zone_1
  light_zone_2: !input light_zone_2
  light_zone_3: !input light_zone_3
  on_off_as_toggle: !input on_off_as_toggle
  brightness_setting_type: !input brightness_setting_type
  brightness_step: !input brightness_step
  brightness_step_pct: !input brightness_step_pct
  brightness_step_loop: !input brightness_step_loop
  brightness_step_pct_loop: !input brightness_step_pct_loop
  brightness_move_max_loop_repeats: !input brightness_move_max_loop_repeats
  brightness_move_delay_loop_repeats: !input brightness_move_delay_loop_repeats
  
  actions_mapping:
    zigbee2mqtt:
      power_on: ['on_ep1', 'on_ep2', 'on_ep3']
      power_off: ['off_ep1', 'off_ep2', 'off_ep3']
      color_move: ['color_move_ep1', 'color_move_ep2', 'color_move_ep3']
      color_temperature_move: ['color_temperature_move_ep1', 'color_temperature_move_ep2', 'color_temperature_move_ep3']
      brightness_step_down: ['brightness_step_down_ep1', 'brightness_step_down_ep2', 'brightness_step_down_ep3']
      brightness_step_up: ['brightness_step_up_ep1', 'brightness_step_up_ep2', 'brightness_step_up_ep3']
      brightness_move_down: ['brightness_move_down_ep1', 'brightness_move_down_ep2', 'brightness_move_down_ep3']
      brightness_move_up: ['brightness_move_up_ep1', 'brightness_move_up_ep2', 'brightness_move_up_ep3']
      scenarios: ['recall_1_ep1', 'recall_2_ep1', 'recall_3_ep1', 'recall_4_ep1', 'recall_5_ep1', 'recall_1_ep2', 'recall_2_ep2', 'recall_3_ep2', 'recall_4_ep2', 'recall_5_ep2', 'recall_1_ep3', 'recall_2_ep3', 'recall_3_ep3', 'recall_4_ep3', 'recall_5_ep3']
  
  power_on: '{{ actions_mapping[integration]["power_on"] }}'
  power_off: '{{ actions_mapping[integration]["power_off"] }}'
  color_move: '{{ actions_mapping[integration]["color_move"] }}'
  color_temperature_move: '{{ actions_mapping[integration]["color_temperature_move"] }}'
  brightness_step_down: '{{ actions_mapping[integration]["brightness_step_down"] }}'
  brightness_step_up: '{{ actions_mapping[integration]["brightness_step_up"] }}'
  brightness_move_down: '{{ actions_mapping[integration]["brightness_move_down"] }}'
  brightness_move_up: '{{ actions_mapping[integration]["brightness_move_up"] }}'
  scenarios: '{{ actions_mapping[integration]["scenarios"] }}'
  
mode: restart
max_exceeded: silent

trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity

condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
          {%- if integration == "zigbee2mqtt" -%}
            {{ trigger.event.data.new_state.state }}
          {%- elif integration_id == "deconz" -%}
            {{ trigger.event.data.event }}
          {%- elif integration_id == "zha" -%}
            {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
          {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
      
action:
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration == "zigbee2mqtt" -%}
          {{ trigger.event.data.new_state.state }}
        {%- endif -%}
      entity: >
        {% if "ep1" in trigger_action %}
          {{ light_zone_1 }}
        {% elif "ep2" in trigger_action %}
          {{ light_zone_2 }}
        {% elif "ep3" in trigger_action %}
          {{ light_zone_3 }}
        {% endif %}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in power_on }}'
        sequence:
          - service: >
              {% if on_off_as_toggle %}
                light.toggle
              {% else %}
                light.turn_on
              {% endif %}
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in power_off }}'
        sequence:
          - service: >
              {% if on_off_as_toggle %}
                light.toggle
              {% else %}
                light.turn_off
              {% endif %}
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in color_move }}'
        sequence:
          - service: light.turn_on
            data_template:
              xy_color:
                - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
                - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in color_temperature_move }}'
        sequence:
          - service: light.turn_on
            data_template:
              color_temp: '{{ trigger.event.data.new_state.attributes.action_color_temperature | int }}'
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in brightness_step_down }}'
        sequence:
          - service: light.turn_on
            data: >
              {% if brightness_setting_type == "value" %}
                {"brightness_step": {{ ("-" ~ brightness_step|string)|int }}}
              {% else %}
                {"brightness_step_pct": {{ ("-" ~ brightness_step_pct|string)|int }}}
              {% endif %}
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in brightness_step_up }}'
        sequence:
          - service: light.turn_on
            data: >
              {% if brightness_setting_type == "value" %}
                {"brightness_step": {{ brightness_step }}}
              {% else %}
                {"brightness_step_pct": {{ brightness_step_pct }}}
              {% endif %}
            target:
              device_id: '{{ entity }}'
      - conditions: '{{ trigger_action | string in brightness_move_down }}'
        sequence:
          - repeat:
              while: '{{ repeat.index < brightness_move_max_loop_repeats | int }}'
              sequence:
                - service: light.turn_on
                  data: >
                    {% if brightness_setting_type == "value" %}
                      {"brightness_step": {{ ("-" ~ brightness_step_loop|string)|int }}}
                    {% else %}
                      {"brightness_step_pct": {{ ("-" ~ brightness_step_pct_loop|string)|int }}}
                    {% endif %}
                  target:
                    device_id: '{{ entity }}'
                - delay: '{{ brightness_move_delay_loop_repeats }}'
      - conditions: '{{ trigger_action | string in brightness_move_up }}'
        sequence:
          - repeat:
              while: '{{ repeat.index < brightness_move_max_loop_repeats | int }}'
              sequence:
                - service: light.turn_on
                  data: >
                    {% if brightness_setting_type == "value" %}
                      {"brightness_step": {{ brightness_step_loop }}}
                    {% else %}
                      {"brightness_step_pct": {{ brightness_step_pct_loop }}}
                    {% endif %}
                  target:
                    device_id: '{{ entity }}'
                - delay: '{{ brightness_move_delay_loop_repeats }}'
      - conditions: '{{ trigger_action | string in scenarios }}'
        sequence:
          - choose:
              - conditions: '{{ trigger_action | string == "recall_1_ep1" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_1_zone_1
              - conditions: '{{ trigger_action | string == "recall_2_ep1" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_2_zone_1
              - conditions: '{{ trigger_action | string == "recall_3_ep1" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_3_zone_1
              - conditions: '{{ trigger_action | string == "recall_4_ep1" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_4_zone_1
              - conditions: '{{ trigger_action | string == "recall_5_ep1" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_5_zone_1
              - conditions: '{{ trigger_action | string == "recall_1_ep2" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_1_zone_2
              - conditions: '{{ trigger_action | string == "recall_2_ep2" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_2_zone_2
              - conditions: '{{ trigger_action | string == "recall_3_ep2" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_3_zone_2
              - conditions: '{{ trigger_action | string == "recall_4_ep2" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_4_zone_2
              - conditions: '{{ trigger_action | string == "recall_5_ep2" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_5_zone_2
              - conditions: '{{ trigger_action | string == "recall_1_ep3" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_1_zone_3
              - conditions: '{{ trigger_action | string == "recall_2_ep3" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_2_zone_3
              - conditions: '{{ trigger_action | string == "recall_3_ep3" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_3_zone_3
              - conditions: '{{ trigger_action | string == "recall_4_ep3" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_4_zone_3
              - conditions: '{{ trigger_action | string == "recall_5_ep3" }}'
                sequence:
                  - choose:
                      - conditions: []
                        sequence: !input scenario_5_zone_3
