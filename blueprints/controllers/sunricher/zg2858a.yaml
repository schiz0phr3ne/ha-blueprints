blueprint:
  name: Sunricher - Télécommande RGBCCT 3 canaux
  description: To-do
  domain: automation
  
  input:
    integration:
      name: Intégration
      description: Intégration Zigbee utilisée pour ce contrôleur.
      selector:
        select:
          options:
            - Zigbee2MQTT

    controller_entity:
      name: Contrôleur
      description: Capteur d'action du contrôleur à utiliser pour l'automatisation.
      selector:
        entity:
          domain: sensor

    light_zone_1:
      name: Zone 1 - Lumière
      description: Lumière controlée en zone 1
      selector:
        device:
          entity:
            domain: light
     
    light_zone_2:
      name: Zone 2 - Lumière
      description: Lumière controlée en zone 2
      selector:
        device:
          entity:
            domain: light
          
    light_zone_3:
      name: Zone 3 - Lumière
      description: Lumière controlée en zone 3
      selector:
        device:
          entity:
            domain: light
          
variables:
  integration: !input integration
  integration_id: '{{ integration | lower }}'
  controller_entity: !input controller_entity
  light_zone_1: !input light_zone_1
  
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity

condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
          {%- if integration_id == "zigbee2mqtt" -%}
            {{ trigger.event.data.new_state.state }}
          {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
      
action:
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
          {{ trigger.event.data.new_state.state }}
        {%- endif -%}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in "color_move_ep1" }}'
        sequence:
          service: light.turn_on
          data_template:
            xy_color:
              - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
              - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
          target:
            device_id: '{{ light_zone_1 }}'
