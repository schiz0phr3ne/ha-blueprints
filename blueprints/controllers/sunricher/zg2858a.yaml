blueprint:
  name: Sunricher - Télécommande RGBCCT 3 canaux
  description: To-do
  domain: automation
  
  input:
    integration:
      name: Intégration
      description: Intégration Zigbee utilisée par ce contrôleur.
      selector:
        select:
          options:
            - label: Zigbee2MQTT
              value: zigbee2mqtt
          mode: dropdown
    controller_entity:
      name: Contrôleur
      description: Capteur d'action du contrôleur à utiliser pour l'automatisation.
      selector:
        entity:
          domain: sensor
    light_zone_1:
      name: Zone 1 - Lumière
      description: Lumière controlée en zone 1
      selector:
        device:
          entity:
            domain: light    
    light_zone_2:
      name: Zone 2 - Lumière
      description: Lumière controlée en zone 2
      selector:
        device:
          entity:
            domain: light         
    light_zone_3:
      name: Zone 3 - Lumière
      description: Lumière controlée en zone 3
      selector:
        device:
          entity:
            domain: light
    brightness_setting_type:
      name: Luminosité - type de réglage
      default: Valeur
      selector:
        select:
          options:
            - label: Valeur
              value: value
            - label: Pourcentage
              value: percent
          mode: dropdown
    brightness_step:
      name: Luminosité - intervalle de réglage (valeur)
      description: Nombre à ajouter ou soustraire d'une luminosité.
      default: 15
      selector:
        number:
          min: 1
          max: 255
          mode: box
    brightness_step_pct:
      name: Luminosité - intervalle de réglage (pourcentage)
      description: Nombre de pourcents à ajouter ou soustraire d'une luminosité.
      default: 5
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: box
    on_off_as_toggle:
      name: Interpréter les commandes d'allumage et d'extinction en tant que bascule
      description: |
        La télécommande envoie une commande `on` ou une commande `off`, quelque 
        soit l'état de l'appareil contrôlé.
        Une interprétation stricte de ces commandes peut donc causer des effets indésirables.
        
        **Exemple :**
        Une commande `on` en zone 1 sera suivie d'une commande `off` en zone 2 ou 3.
        La lumière contrôlée en zone 2 ou 3 ne serait alors pas allumée, avant d'avoir rappuyé sur le bouton d'alimentation.
        
        Il peut être plus judicieux d'interpréter ces commandes en `toggle`.
      default: True
      selector:
        boolean:
          
variables:
  integration: !input integration
  controller_entity: !input controller_entity
  light_zone_1: !input light_zone_1
  light_zone_2: !input light_zone_2
  light_zone_3: !input light_zone_3
  brightness_setting_type: !input brightness_setting_type
  brightness_step: !input brightness_step
  brightness_step_pct: !input brightness_step_pct
  on_off_as_toggle: !input on_off_as_toggle
  
  actions_mapping:
    zigbee2mqtt:
      power_on: ['on_ep1', 'on_ep2', 'on_ep3']
      power_off: ['off_ep1', 'off_ep2', 'off_ep3']
      color_move: ['color_move_ep1', 'color_move_ep2', 'color_move_ep3']
      color_temperature_move: ['color_temperature_move_ep1', 'color_temperature_move_ep2', 'color_temperature_move_ep3']
      brightness_step_down: ['brightness_step_down_ep1', 'brightness_step_down_ep2', 'brightness_step_down_ep3']
      brightness_step_up: ['brightness_step_up_ep1', 'brightness_step_up_ep2', 'brightness_step_up_ep3']
  
  power_on: '{{ actions_mapping[integration]["power_on"] }}'
  power_off: '{{ actions_mapping[integration]["power_off"] }}'
  color_move: '{{ actions_mapping[integration]["color_move"] }}'
  color_temperature_move: '{{ actions_mapping[integration]["color_temperature_move"] }}'
  brightness_step_down: '{{ actions_mapping[integration]["brightness_step_down"] }}'
  brightness_step_up: '{{ actions_mapping[integration]["brightness_step_up"] }}'
  
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity

condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
          {%- if integration == "zigbee2mqtt" -%}
            {{ trigger.event.data.new_state.state }}
          {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
      
action:
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration == "zigbee2mqtt" -%}
          {{ trigger.event.data.new_state.state }}
        {%- endif -%}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in power_on }}'
        sequence:
          - service: >
              {% if on_off_as_toggle %}
                light.toggle
              {% else %}
                light.turn_on
              {% endif %}
            target:
              device_id: >
                {% if trigger_action == "on_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "on_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
      - conditions: '{{ trigger_action | string in power_off }}'
        sequence:
          - service: >
              {% if on_off_as_toggle %}
                light.toggle
              {% else %}
                light.turn_off
              {% endif %}
            target:
              device_id: >
                {% if trigger_action == "off_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "off_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
      - conditions: '{{ trigger_action | string in color_move }}'
        sequence:
          - service: light.turn_on
            data_template:
              xy_color:
                - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
                - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
            target:
              device_id: >
                {% if trigger_action == "color_move_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "color_move_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
      - conditions: '{{ trigger_action | string in color_temperature_move }}'
        sequence:
          - service: light.turn_on
            data_template:
              color_temp: '{{ trigger.event.data.new_state.attributes.action_color_temperature | int }}'
            target:
              device_id: >
                {% if trigger_action == "color_move_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "color_move_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
      - conditions: '{{ trigger_action | string in brightness_step_down }}'
        sequence:
          - service: light.turn_on
            data: >
              {% if brightness_setting_type == "value" %}
                {"brightness_step": {{ ("-" ~ brightness_step|string)|int }}}
              {% else %}
                {"brightness_step_pct": {{ ("-" ~ brightness_step_pct|string)|int }}}
              {% endif %}
            target:
              device_id: >
                {% if trigger_action == "brightness_step_down_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "brightness_step_down_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
      - conditions: '{{ trigger_action | string in brightness_step_up }}'
        sequence:
          - service: light.turn_on
            data: >
              {% if brightness_setting_type == "value" %}
                {"brightness_step": {{ brightness_step }}}
              {% else %}
                {"brightness_step_pct": {{ brightness_step_pct }}}
              {% endif %}
            target:
              device_id: >
                {% if trigger_action == "brightness_step_up_ep1" %}
                  {{ light_zone_1 }}
                {% elif trigger_action == "brightness_step_up_ep2" %}
                  {{ light_zone_2 }}
                {% else %}
                  {{ light_zone_3 }}
                {% endif %}
