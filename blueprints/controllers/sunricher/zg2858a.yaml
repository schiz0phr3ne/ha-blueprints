blueprint:
  name: Sunricher - Télécommande RGBCCT 3 canaux
  description: To-do
  domain: automation
  
  input:
    integration:
      name: Intégration
      description: Intégration Zigbee utilisée par ce contrôleur.
      selector:
        select:
          options:
            - Zigbee2MQTT
    controller_entity:
      name: Contrôleur
      description: Capteur d'action du contrôleur à utiliser pour l'automatisation.
      selector:
        entity:
          domain: sensor
    light_zone_1:
      name: Zone 1 - Lumière
      description: Lumière controlée en zone 1
      selector:
        device:
          entity:
            domain: light    
    light_zone_2:
      name: Zone 2 - Lumière
      description: Lumière controlée en zone 2
      selector:
        device:
          entity:
            domain: light         
    light_zone_3:
      name: Zone 3 - Lumière
      description: Lumière controlée en zone 3
      selector:
        device:
          entity:
            domain: light
    on_off_as_toggle:
      name: Interpréter les commandes d'allumage et d'extinction en tant que bascule
      description: |
        La télécommande envoie une commande `on` ou une commande `off`, quelque 
        soit l'état de l'appareil contrôlé.
        Une interprétation stricte de ces commandes peut donc causer des effets indésirables.
        
        **Exemple :**
        Une commande `on` en zone 1 sera suivie d'une commande `off` en zone 2 ou 3.
        La lumière contrôlée en zone 2 ou 3 ne serait alors pas allumée, avant d'avoir rappuyé sur le bouton d'alimentation.
        
        Il peut être plus judicieux d'interpréter ces commandes en `toggle`.
      selector:
        boolean:
          
variables:
  integration: !input integration
  integration_id: '{{ integration | lower }}'
  controller_entity: !input controller_entity
  light_zone_1: !input light_zone_1
  light_zone_2: !input light_zone_2
  light_zone_3: !input light_zone_3
  on_off_as_toggle: !input on_off_as_toggle
  
  actions_mapping:
    zigbee2mqtt:
      power_on_zone_1: [on_ep1]
      power_on_zone_2: [on_ep2]
      power_on_zone_3: [on_ep3]
      power_off_zone_1: [off_ep1]
      power_off_zone_2: [off_ep2]
      power_off_zone_3: [off_ep3]
      color_move_zone_1: [color_move_ep1]
      color_move_zone_2: [color_move_ep2]
      color_move_zone_3: [color_move_ep3]
      brightness_step_down_zone_1: [brightness_step_down_ep1]
      brightness_step_down_zone_2: [brightness_step_down_ep2]
      brightness_step_down_zone_3: [brightness_step_down_ep3]
      brightness_step_up_zone_1: [brightness_step_up_ep1]
      brightness_step_up_zone_2: [brightness_step_up_ep2]
      brightness_step_up_zone_3: [brightness_step_up_ep3]
  
  power_on_zone_1: '{{ actions_mapping[integration_id]["power_on_zone_1"] }}'
  power_on_zone_2: '{{ actions_mapping[integration_id]["power_on_zone_2"] }}'
  power_on_zone_3: '{{ actions_mapping[integration_id]["power_on_zone_3"] }}'
  power_off_zone_1: '{{ actions_mapping[integration_id]["power_off_zone_1"] }}'
  power_off_zone_2: '{{ actions_mapping[integration_id]["power_off_zone_2"] }}'
  power_off_zone_3: '{{ actions_mapping[integration_id]["power_off_zone_3"] }}'
  color_move_zone_1: '{{ actions_mapping[integration_id]["color_move_zone_1"] }}'
  color_move_zone_2: '{{ actions_mapping[integration_id]["color_move_zone_2"] }}'
  color_move_zone_3: '{{ actions_mapping[integration_id]["color_move_zone_3"] }}'
  brightness_step_down_zone_1: '{{ actions_mapping[integration_id]["brightness_step_down_zone_1"] }}'
  brightness_step_down_zone_2: '{{ actions_mapping[integration_id]["brightness_step_down_zone_2"] }}'
  brightness_step_down_zone_3: '{{ actions_mapping[integration_id]["brightness_step_down_zone_3"] }}'
  brightness_step_up_zone_1: '{{ actions_mapping[integration_id]["brightness_step_up_zone_1"] }}'
  brightness_step_up_zone_2: '{{ actions_mapping[integration_id]["brightness_step_up_zone_2"] }}'
  brightness_step_up_zone_3: '{{ actions_mapping[integration_id]["brightness_step_up_zone_3"] }}'
  
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity

condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
          {%- if integration_id == "zigbee2mqtt" -%}
            {{ trigger.event.data.new_state.state }}
          {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
      
action:
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
          {{ trigger.event.data.new_state.state }}
        {%- endif -%}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in power_on_zone_1 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_1 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_on
                  target:
                    device_id: '{{ light_zone_1 }}'
      - conditions: '{{ trigger_action | string in power_on_zone_2 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_2 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_on
                  target:
                    device_id: '{{ light_zone_2 }}'
      - conditions: '{{ trigger_action | string in power_on_zone_3 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_3 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_on
                  target:
                    device_id: '{{ light_zone_3 }}'
      - conditions: '{{ trigger_action | string in power_off_zone_1 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_1 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_off
                  target:
                    device_id: '{{ light_zone_1 }}'
      - conditions: '{{ trigger_action | string in power_off_zone_2 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_2 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_off
                  target:
                    device_id: '{{ light_zone_2 }}'
      - conditions: '{{ trigger_action | string in power_off_zone_3 }}'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: '{{ on_off_as_toggle }}'
                sequence:
                  service: light.toggle
                  target:
                    device_id: '{{ light_zone_3 }}'
              - conditions:
                  - condition: template
                    value_template: '{{ not on_off_as_toggle }}'
                sequence:
                  service: light.turn_off
                  target:
                    device_id: '{{ light_zone_3 }}'
      - conditions: '{{ trigger_action | string in color_move_zone_1 }}'
        sequence:
          service: light.turn_on
          data_template:
            xy_color:
              - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
              - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
          target:
            device_id: '{{ light_zone_1 }}'
      - conditions: '{{ trigger_action | string in color_move_zone_2 }}'
        sequence:
          service: light.turn_on
          data_template:
            xy_color:
              - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
              - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
          target:
            device_id: '{{ light_zone_2 }}'
      - conditions: '{{ trigger_action | string in color_move_zone_3 }}'
        sequence:
          service: light.turn_on
          data_template:
            xy_color:
              - '{{ trigger.event.data.new_state.attributes.action_color.x | float }}'
              - '{{ trigger.event.data.new_state.attributes.action_color.y | float }}'
          target:
            device_id: '{{ light_zone_3 }}'
      - conditions: '{{ trigger_action | string in brightness_step_down_zone_1 }}'
        sequence:
          service: light.turn_on
          data:
            brightness_step_pct: -5
          target:
            device_id: '{{ light_zone_1 }}'
      - conditions: '{{ trigger_action | string in brightness_step_down_zone_2 }}'
        sequence:
          service: light.turn_on
          data:
            brightness_step_pct: -5
          target:
            device_id: '{{ light_zone_2 }}'
      - conditions: '{{ trigger_action | string in brightness_step_down_zone_3 }}'
        sequence:
          service: light.turn_on
          data:
            brightness_step_pct: -5
          target:
            device_id: '{{ light_zone_3 }}'
