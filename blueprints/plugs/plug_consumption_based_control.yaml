# Blueprint metadata
blueprint:
  name: Prise - Contrôle basé sur la consommation électrique
  description: |
    To-do
    
  domain: automation
  
  input:
    plug_entity:
      name: Prise à contrôler
      description: |
        Prise - ou tout autre appareil permettant de commuter sa sortie - à contrôler avec l'automatisation.
      selector:
        entity:
          domain: switch
    plug_power_sensor:
      name: Capteur de consommation électrique de la prise à contrôler
      description: |
        Capteur de consommation électrique à utiliser pour l'automatisation.
      selector:
        entity:
          domain: sensor
    activation_threshold:
      name: Seuil de déclenchement de l'automatisation
      description: |
        Valeur sous laquelle l'automatisation est déclenchée.
        
        **Minimum :** 1
        **Minimum :** 3680
        **Pas :** 1
        
        **Valeur par défaut :** 1
      default: 1
      selector:
        number:
          min: 1
          max: 3680
          unit_of_measurement: 'W'
          mode: box
    activation_delay:
      name: Délai avant exécution de l'action
      description: |
        Délai avant exécution de l'action permettant, par exemple et si la vérification de consommation de la prise est activée, de brancher un autre équipement sans que la prise ne s'éteigne.
        
        **Valeur par défaut :** 00:00:00
      selector:
        duration:
    check_power:
      name: Vérification de la consommation électrique avant exécution de l'action
      description: |
        Quand activée, la vérification de la consommation électrique avant exécution de l'action permet de ne pas éteindre la prise, si un appareil branché dessus consomme toujours de l'électricité.
        
        **Valeur par défaut :** activé
      default: true
      selector:
        boolean:
    check_state:
      name: Vérification de l'état de la prise avant exécution de l'action
      description: |
        Quand activée, la vérification de l'état de la prise permet d'éviter d'exécuter l'action, si la prise est déjà dans l'état final.
        
        **Valeur par défaut :** activé
      default: true
      selector:
        boolean:
    send_notification:
      name: Envoyer une notification après exécution de l'action
      description: |
        Permet, une fois l'action effectuée, d'envoyer une notification.
        
        **Valeur par défaut :** activé
      default: true
      selector:
        boolean:
    mobile_notification_service:
      name: Destination de la notification
      description: |
        Service utilisé pour l'envoi de la notification.
        
        **Attention :** seuls les services des appareils mobiles disposant de l'application Home Assistant sont disponibles (`notify.mobile_app_votre_appareil`).
      selector:
        text:
    notification_title:
      name: Titre de la notification
      description: |
        Titre de la notification.
        
        Les variables `{{ plug_entity }}`, `{{ plug_power_sensor }}`, `{{ activation_threshold }}` et `{{ activation_delay }}` peuvent être incluses, respectivement pour la prise contrôlée, le capteur de consommation électrique, le seuil de déclenchement et le délai avant exécution de l'action.
      default: []
      selector:
        text:
    notification_message:
      name: Contenu de la notification
      description: |
        Contenu de la notification.
        
        Les variables `{{ plug_entity }}`, `{{ plug_power_sensor }}`, `{{ activation_threshold }}` et `{{ activation_delay }}` peuvent être incluses, respectivement pour la prise contrôlée, le capteur de consommation électrique, le seuil de déclenchement et le délai avant exécution de l'action.
      default: []
      selector:
        text:
          multiline: true

variables:
  plug_entity: !input plug_entity
  plug_power_sensor: !input plug_power_sensor
  activation_threshold: !input activation_threshold
  activation_delay: !input activation_delay
  check_power: !input check_power
  check_state: !input check_state
  send_notification: !input send_notification
  mobile_notification_service: !input mobile_notification_service
  notification_title: !input notification_title
  notification_message: !input notification_message

trigger_variables:
  plug_power_sensor: !input plug_power_sensor
  activation_threshold: !input activation_threshold

mode: single
max_exceeded: silent

trigger: 
  - platform: template
    value_template: '{{ states(plug_power_sensor) | float < activation_threshold }}'
condition: []
action:
  - delay: '{{ activation_delay }}'
  - choose:
    - conditions: '{{ check_power and check_state }}'
      sequence:
      - condition: '{{ states(plug_power_sensor) | float < activation_threshold }}'
      - condition: '{{ states(plug_entity) == "on" }}'
      - service: switch.turn_off
        data:
          entity_id: '{{ plug_entity }}'
      - condition: '{{ send_notification }}'
      - service: '{{ mobile_notification_service }}'
        data:
          title: '{{ notification_title }}'
          message: '{{ notification_message }}'
    - conditions: '{{ check_power and not check_state }}'
      sequence:
      - condition: '{{ states(plug_power_sensor) | float < activation_threshold }}'
      - service: switch.turn_off
        data:
          entity_id: '{{ plug_entity }}'
      - condition: '{{ send_notification }}'
      - service: '{{ mobile_notification_service }}'
        data:
          title: '{{ notification_title }}'
          message: '{{ notification_message }}'
    - conditions: '{{ not check_power and check_state }}'
      sequence:
      - condition: '{{ states(plug_entity) == "on" }}'
      - service: switch.turn_off
        data:
          entity_id: '{{ plug_entity }}'
      - condition: '{{ send_notification }}'
      - service: '{{ mobile_notification_service }}'
        data:
          title: '{{ notification_title }}'
          message: '{{ notification_message }}'
    - conditions: '{{ not check_power and not check_state }}'
      sequence:
      - service: switch.turn_off
        data:
          entity_id: '{{ plug_entity }}'
      - condition: '{{ send_notification }}'
      - service: '{{ mobile_notification_service }}'
        data:
          title: '{{ notification_title }}'
          message: '{{ notification_message }}'
